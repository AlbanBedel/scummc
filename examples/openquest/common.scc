/* ScummC
 * Copyright (C) 2006  Alban Bedel
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

// include all the vars used by the engine itself
#include <scummVars6.s>
#include "common.sch"
#include "inventoryitems.sch"
#include "dialog.sch"
#include "verbs.sch"
#include "actors.sch"
#include "officeroom.sch"
#include "titlescreen.scc"

int selVerb,altVerb;
int tryPick;



room ResRoom {

    // define the charset we are going to use
    // the gui use the first charset, so te be sure force its address
    chset chset1 @ 1 = "vera-gui.char";
    // our standard charset
    chset chtest = "vera.char";
    // dialog charset
    chset dialogCharset = "vera-small.char";


    // an object for the cursor image
    object cursor {
        x = 0;
        y = 0;
        w = 16;
        h = 16;
        name = "cursor";
        states = {
            { 3, 3, "graphics/cursor/cursor.bmp" }
        };
    }


    local script localTest() {
        dbgPrint("Ltst");
    }

    // some startup scripts


    // this script run in the background cheking where the mouse is
    // and update the sentence and set the alt verb
    script mouseWatch() {
        int vrb,obj,target,alt,desc;

        // we run forever (well until someone kill us)
        while(1) {
            unless(cursorOn) {
                if(altVerb) {
                    setCurrentVerb(altVerb);
                    setVerbOn();
                    redrawVerb();
                    altVerb = 0;
                }
                do breakScript() until(cursorOn);
                        
            }
            if(isScriptRunning(VAR_SENTENCE_SCRIPT)) {
                 breakScript();
                continue;
            }

            // read the current state

            // find what verb should be displayed and the
            // object under the pointer
            vrb = 0;
            desc = 0;
            obj = getActorAt(VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
            if(obj == VAR_EGO)
                obj = 0;
            else if (actorObject[obj])
            	desc = actorObject[obj];

            unless(obj)
                obj = getObjectAt(VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
            unless(obj) {
                obj = getVerbAt(VAR_MOUSE_X,VAR_MOUSE_Y);
                if(obj >= invSlot0 && obj <= invSlot7) {
                    obj = findInventory(VAR_EGO,obj-invSlot0+1+invOffset);
                    if(!selVerb || selVerb == PickUp)
                        vrb = Use;
                    else
                        vrb = selVerb;
                } else
                    obj = 0;
            }
            unless(vrb)
                vrb = selVerb ? selVerb : WalkTo;                    
            
            // Set description object
            unless(desc)
            	desc = obj;
            
            if(sntcPrepo) {
                target = sntcObjB;
                if(obj == sntcObjA) {
                	obj = 0;
                	desc = 0;
                }
            } else target = sntcObjA;
            
            //dbgPrint("%i{vrb} <> %i{sntcVerb} | %i{obj} <> %i{target}");
            unless(vrb == sntcVerb && obj == target) {
                sntcVerb = vrb;
                
                // Set sentence line
                if(sntcPrepo) {
                	sntcObjB = obj;
                	sntcObjBDesc = desc;
                }
                else {
                	sntcObjA = obj;
                	sntcObjADesc = desc;
                }
                
                setCurrentVerb(SntcLine);
                redrawVerb();
            }


            if(obj) {
                if(obj is Person)
                    alt = TalkTo;
                else if(obj is Openable)
                    alt = getObjectState(obj) ? Close : Open;
                else
                    alt = LookAt;
            } else
                alt = 0;

            if(alt != altVerb) {
                if(altVerb) {
                    setCurrentVerb(altVerb);
                    setVerbOn();
                    redrawVerb();
                }
                if(alt) {
                    setCurrentVerb(alt);
                    verbDim();
                    redrawVerb();
                }
                altVerb = alt;
            }

            breakScript();
        }
    }


    // setup the cursor
    script showCursor() {
        
        if(cursorOn) return;
/*
        unless(cursorLoaded) {
            cursorLoaded = 1;
            loadFlObject(cursor,ResRoom);
            setCursorImage(cursor,ResRoom);
            setCursorTransparency(31);
        }
*/
        cursorOn();
        userPutOn();
        cursorOn = 1;
    }

    script hideCursor() {
        unless(cursorOn) return;
        
        cursorOff();
        userPutOff();
        cursorOn = 0;
    }

    script cutsceneStart(int type) {
        dbgPrint("cutscene start");
        hideCursor();
        if(type > 0) {
            // We need to break here to make sure the mouse watch script
            // stop. Otherwise it might turn on the alt verb again,
            breakScript();
            Verbs::showVerbs(0);
        }
    }

    script cutsceneEnd(int type) {
        dbgPrint("cutscene end");
        showCursor();
        if(type > 1)
            Verbs::showVerbs(1);
    }

    script resetSntc(int vrb) {
        sntcObjA = 0;
        sntcObjADesc = 0;
        if(sntcPrepo) {
            undim(sntcPrepo);
            sntcObjB = 0;
            sntcObjBDesc = 0;
        }
        selVerb = vrb;
        setCurrentVerb(SntcLine);
        redrawVerb();
    }

    script defaultAction(int vrb, int objA, int objB) {
        switch(vrb) {
        case WalkTo:
            return;
            
        case PickUp:
            if(objA is Person)
                egoSay("I can't carry him around.");
            else
                egoSay("I can't pick that up.");
            break;
            
       case Use:
           if(objA is Person) {
               if(objB)
                   egoSay("I can't use that on someone!");
               else {
                   // switch to another ego
                   if( objA == commanderZif || objA == ensignZob ) {
                     VAR_EGO = objA;
                     cameraFollowActor(VAR_EGO);
                   }
                   else
                     egoSay("I can't just *use* someone.");
               }
           } else
               egoSay("I can't use that !");
           break;

       case Give:
           if(objB && objA is Person) {
               egoSay("I don't think i should be giving this away.");
               break;
           }
           else
               egoSay("I can't do that !");
           break;

        case LookAt:
            if(objA is Person)
                egoSay("There is nothing special about him.");
            else
                egoSay("There is nothing special about it.");
            break;
            
        case Push:
        case Pull:
            if(objA is Person)
                egoSay("That wouldn't be very nice.");
            else
                egoSay("I don't feel in shape today.");
            break;
            
        case Open:
            if(objA is Person) {
                egoSay("You know these human bodies aren't very resistant, if i open it he might die.");
                break;
            }
            if(objA is !Openable) {
                egoSay("It's not the kind of thing that can be opened.");
                break;
            }
            if(getObjectState(objA)) {
                egoSay("It's already open.");
                break;
            }
            // some sound would be nice
            setObjectState(objA,1);
            if(getObjectVerbEntrypoint(objA,SetBoxes))
                startObject2(objA,SetBoxes, [ vrb, objA ]);
            break;
            
        case Close:
            if(objA is Person) {
                egoSay("Closing someone ?\wThat hardly make any sense.");
                break;
            }            
            if(objA is !Openable) {
                egoSay("I don't think that this can be closed.");
                break;
            }
            unless(getObjectState(objA)) {
                egoSay("It's already closed.");
                break;
            }
            setObjectState(objA,0);
            if(getObjectVerbEntrypoint(objA,SetBoxes))
                startObject2(objA,SetBoxes, [ vrb, objA ]);
            break;

        default:
            egoSay("Hmm. No.");
            break;
        }
        waitForMessage();
    }

    // the sentence script, doSentence call it
    script sentenceHandler(int vrb, int objA, int objB) {
        int owner,tmp,act;

        // click on the sentence line, make it as if the user
        // clicked the currently selected objects
        if(vrb == SntcLine) {
            vrb = sntcVerb;
            objA = sntcObjA;
            objB = sntcObjB;
        }

        // look who own the object
        owner = getObjectOwner(objA);

        // with use and give we must own it first
        while(isAnyOf(vrb, [ Use, Give ])) {
            unless(objB) {
                if(getObjectVerbEntrypoint(objA,Preposition)) {
                    startObject2(objA,Preposition,[ vrb, objA ]);
                    if(sntcPrepo) {
                        setCurrentVerb(SntcLine);
                        redrawVerb();
                        return;
                    }
                }
                break;
            }

            // we must pick it up first
            if(owner != VAR_EGO) {
                if(tryPick == objA) { // pickup failed
                    tryPick = 0;
                    return;
                }
                // try to pickup then do our action again
                tryPick = objA;
                doSentence(vrb,objA,0,objB);
                doSentence(PickUp,objA,0,0);
                return;
            } else
                tryPick = 0;
            break;
        }
        
        // if the object is in the room walk there
        if(objA <= 0xF || owner == 0xF) {
            walkActorToObj(VAR_EGO,objA,0);
            waitForActor(VAR_EGO);
            // This is needed when walking to an actor
            if(objA <= 0xF)
                actorFace(VAR_EGO,objA);
        } else if(objB) if(objB <= 0xF || getObjectOwner(objB) == 0xF) {
            walkActorToObj(VAR_EGO,objB,0);
            waitForActor(VAR_EGO);
            if(objB <= 0xF)
                actorFace(VAR_EGO,objB);
        }

        // switch the objects
        if(objB) {
            dbgPrint("Switch objects");
            tmp = objA;
            objA = objB;
            objB = tmp;
        }

        // Take the actorObject if it exist
        if(objA <= 0xF) if(actorObject[objA]) {
            act = objA;
            objA = actorObject[objA];
        }

        // if the object implement the verb call that
        if(getObjectVerbEntrypoint(objA,vrb)) {
            startObject(2,objA,vrb,[ vrb, objA, objB ]);
            // if the verb locked the cursor wait until its unlocked
            do breakScript() until(cursorOn);
        } else {
            //otherwise use our default:
            defaultAction(vrb, act ? act : objA, objB);
 
        }
        // if the verb need objB we are done for now
        if(sntcPrepo && !objB) return;

        // all done, reset the sentence
        resetSntc(0);
    }

    script keyboardHandler(int key) {
        switch(key) {
        case 'o':
            egoSay("Hooo");
            break;
        case 'r':
            egoSay("Let's restart.");
            waitForMessage();
            restartGame();
            break;
        case 'q':
            shutdown();
            break;
        }
    }

    // This script receive the keyboard and mouse events
    script inputHandler(int area,int cmd, int btn) {
        int vrb,obj,objB,x;
        int invCount;

        dbgPrintBegin();
        dbgPrint("Area=%i{area} cmd=%i{cmd} button=%i{btn}");
        dbgPrintEnd();

        egoPrintBegin();
        egoPrintOverhead();
        actorPrintEnd();

        if(area == 4) { // area 4 is the keyboard
            keyboardHandler(cmd);
            return;
        }

        // A verb was clicked
        if(isAnyOf(cmd, [ Give,  PickUp, Use, 
                          Open,  LookAt, Push,
                          Close, TalkTo, Pull ])) {
            resetSntc(cmd);
            return;
        }


        if(cmd == invUp || cmd == invDown) {
            invCount = getInventoryCount(VAR_EGO);
            invOffset += (cmd == invUp ? -1 : 1)*MAX_INVENTORY_DISPLAY/2;
            if(invOffset > invCount) //-MAX_INVENTORY_DISPLAY)
                invOffset = (invCount/MAX_INVENTORY_DISPLAY) * MAX_INVENTORY_DISPLAY;
            if(invOffset < 0) invOffset = 0;
            dbgPrint("Inventory offset: %i{invOffset}");
            Verbs::showVerbs(1);
            //startScript2( inventoryHandler, [0] );
            inventoryHandler( 0 );
            return;
        }


        // now are left: room click and inventory
        // stop any currently running sentence
        stopSentence();
        // (re)start the mouse script, giving it a chance to update
        // the sentence.
        // Note that it's a non recursive call hence it will kill the script
        // then start it again.
        mouseWatch();

        // button 2 was cliked but not on an object: cancel
        if(btn == 2) unless(sntcPrepo ? sntcObjB : sntcObjA) {
            // stop walking
            setCurrentActor(VAR_EGO);
            setActorStanding();
            resetSntc(0);
            return;
        }

        // an object was clicked
        if(sntcPrepo ? sntcObjB : sntcObjA) {
            // an inventory object was cliked
            // select the verb that is displayed
            // We need this to keep Use when PickUp
            // was originaly selected
            if(cmd) selVerb = sntcVerb;
            // button 2: select the alternat verb
            if(btn == 2 && altVerb) {
                selVerb = altVerb;
                mouseWatch();
            }
            // queue the sentence
            doSentence(sntcVerb,sntcObjA,0,sntcObjB);
            return;
        }
        // click on nothing, ignore non room clicks
        if(area != 2) return;

        // reset the sentence so we get WalkTo again
        if(selVerb) resetSntc(0);
        
        // then go there
        walkActorTo(VAR_EGO,VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
    }

    script setInventoryIcon(int icon, int slot) {
        setCurrentVerb(slot);
        setVerbObject(icon,InventoryItems);
        redrawVerb();
    }

    script inventoryHandler(int obj) {
        int i, count;
        //unless(obj) return;

        count = getInventoryCount(VAR_EGO);

        dbgPrint("%i{count} obj in inv");


        for(i = 0 ; i < 8 ; i++) {
        //for(i = invOffset ; i < invOffset+8 ; i++) {
            if(i+invOffset < count) {
                obj = findInventory(VAR_EGO,i+1+invOffset);
                //if( isObjectOfClass( obj, [Pickable] ) ) {
                    //startObject2(obj,Icon, [ setInventoryIcon, invSlot0+i ]);
                //}
                //else
                    startScript0( setInventoryIcon, [obj, invSlot0+i] );
            } else {
                setCurrentVerb(invSlot0+i);
                setVerbNameString(0);
                redrawVerb();
            }
        }

    }

    script preEntry() {
        // Load the actors object for actors moving
        // between several rooms
        Actors::loadObjects();
    }

    script quit() {
        shutdown();
    }

    // The main script is the first thing started by the engine.
    // At that point no room is loaded yet.
    script main (int bootParam) {
        int i,j;

        //trace(1,"main");
        // First setup the engine a bit
        // set the F5 key for the main menu
        VAR_MAINMENU_KEY = 319;
        // set the . key to skip text
        VAR_TALKSTOP_KEY = 46;
        // set F8 as the restart key
        VAR_RESTART_KEY = 322;
        // pause key can also be defined in that way instead of
        // doing it in the key handler as we did.
        VAR_PAUSE_KEY = ' ';
        // skip a cutscene
        VAR_CUTSCENEEXIT_KEY = 27;

        VAR_GAME_VERSION = 0;
        VAR_GUI_COLORS[0] = [ 0x00, 0x00, 0x43, 0x00, 0xD7, 0x34, 0x52, 0x90, 0x00, 0x6A,
                              0x06, 0x1A, 0xD5, 0xE5, 0xE3, 0xE5, 0xE3, 0xE5, 0xE3, 0xE5,
                              0xE3, 0x00, 0x00, 0x00, 0x00, 0x14, 0xD7, 0xE5, 0xE3, 0xE5,
                              0xE3, 0x37, 0x1C, 0xE5, 0xE3, 0xE5, 0xE3, 0x14, 0xD7, 0xE5,
                              0xE3, 0xE5, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];
//                     0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6 ];



        VAR_DEBUG_PASSWORD[0] = "";
        //VAR_DEBUG_PASSWORD[0] = "pass";
        //for(i = 0 ; VAR_DEBUG_PASSWORD[i] != 0 ; i++)
        //    VAR_DEBUG_PASSWORD[i] = VAR_DEBUG_PASSWORD[i] - 'c';
      

        // setup the GUI
        VAR_PAUSE_MSG[0] = "ScummC Paused !";
        VAR_QUIT_MSG[0] = "Are you sure you want to quit ? (Y/N)Y";
        VAR_RESTART_MSG[0] = "Are you sure you want to restart ? (Y/N)Y";

        VAR_SAVE_BTN[0] = "Save it";
        VAR_LOAD_BTN[0] = "Load it";
        VAR_PLAY_BTN[0] = "Continue";
        VAR_CANCEL_BTN[0] = "Cancel";
        VAR_QUIT_BTN[0] = "Quit";
        VAR_OK_BTN[0] = "Ok";

        VAR_SAVE_MSG[0] = "Saveing '%%s'";
        VAR_LOAD_MSG[0] = "Loading '%%s'";

        VAR_MAIN_MENU_TITLE[0] = "ScummC test Menu";
        VAR_SAVE_MENU_TITLE[0] = "Save game";
        VAR_LOAD_MENU_TITLE[0] = "Load game";

        VAR_NOT_SAVED_MSG[0] = "Game NOT saved";
        VAR_NOT_LOADED_MSG[0] = "Game NOT loaded";

        VAR_GAME_DISK_MSG[0] = "Insert disk %%c";
        VAR_ENTER_NAME_MSG[0] = "You must enter a name";
        VAR_SAVE_DISK_MSG[0] = "Insert your save disk";

        VAR_OPEN_FAILED_MSG[0] = "Failed to open %%s (%%c%%d)";
        VAR_READ_ERROR_MSG[0] = "Read error on disk %%c (%%c%%d)";

        // set the main loop speed
        VAR_TIMER_NEXT = 2;
        
        // set the input handler
        VAR_VERB_SCRIPT = inputHandler;
        VAR_SENTENCE_SCRIPT = sentenceHandler;
        VAR_INVENTORY_SCRIPT = inventoryHandler;
        VAR_CUTSCENE_START_SCRIPT = cutsceneStart;
        VAR_CUTSCENE_END_SCRIPT = cutsceneEnd;
        VAR_PRE_ENTRY_SCRIPT = preEntry;

        // keep this room in memory even if we leave it,
        // as it contain the charset, costume, etc
        // it's probably not very useful atm bcs we only have one
        // room, but well :)
        loadRoom(ResRoom);
        lockRoom(ResRoom);

        loadRoom(OfficeRoom);
        lockRoom(OfficeRoom);

        // Initialize the graphic mode.
        // It need to match the room image height otherwise
        // the graphics are going wacky
        setScreen(0,144);
        //setScreen(44,188);

        // Create the actor -> obj link
        dimInt(actorObject,0x10);

        // init the charset
        //initCharset(chset1);
        initCharset(chtest);


        showCursor();

        mouseWatch();

        // init the print slot for actor talking
        printBegin();
        printOverhead();
        printEnd();

        switch(bootParam) {
        case 2:
            setObjectState( OfficeRoom::exitToSecretRoom, 7 );
        case 1:
            didOfficeIntro = 1;
            startRoom(OfficeRoom);
            break;
        default:
            // do the box effect
            screenEffect(0x0005);
            // start the room
            startRoom(TitleScreen);
        }
    }

}
