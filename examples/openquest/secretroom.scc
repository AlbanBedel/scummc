/* ScummC
 * Copyright (C) 2006  Alban Bedel
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */


#include <scummVars6.s>
#include "common.sch"
#include "secretroom.sch"
#include "officeroom.sch"
#include "inventoryitems.sch"



actor bluecupActor;


room SecretRoom {

    image = "graphics/rooms/back02_merged.bmp";

    boxd = "graphics/rooms/back02.box";

    zplane = { "graphics/rooms/back02_mask1.bmp", "graphics/rooms/back02_mask2.bmp" };

    //trans = 0;

    cost bluecupCost = "bluecup.cost";
    
    object blueCup;

    local script entry() {
        int layer;
        setCurrentActor(bluecupActor);
        initActor();
        setActorCostume(bluecupCost);
        setActorName("blue cup");
        setActorAnimSpeed(2);
        actorObject[bluecupActor] = blueCup;
        putActorAt(bluecupActor,160,95,SecretRoom);
        setActorElevation( 55 );
        setCurrentActor(VAR_EGO);
    }

    object blueCup {
        dir = WEST;

        verb(int vrb, int objA, int objB) {
        int i;
        case LookAt:
            egoSay("The holy artifact!");
            return;
        case Use:
            if(objB == InventoryItems::gun) {
                if( getObjectState( InventoryItems::gun ) != 2 ) {
                    egoSay("The weapon is not loaded.");
                    return;
                }
                animateActor(VAR_EGO,40);
                delay(120);
                //egoSay("I am not familiar with this reticule system.");
                //return;
                setCurrentActor(bluecupActor);
                for(i = 11 ; i > 0 ; i--) {
                    delay( 2 );
                    setActorElevation( i*5 );
                }                
                setCurrentActor(VAR_EGO);
                return;
            }
        }
    }


    object exitToOfficeRoom {
        x = 48;
        y = 32;
        w = 32;
        h = 72;
        hs_x = 10;
        hs_y = 50;
        name = "room";
        dir = WEST;

        verb(int vrb, int objA, int objB) {
        case WalkTo:
            putActorAt(VAR_EGO,280,100,OfficeRoom);
            startRoom(OfficeRoom);
            //startRoomWithEgo( OfficeRoom::commanderZifObj, OfficeRoom, 280, 100 );
            //startRoomWithEgo( 0, OfficeRoom, 280, 100 );
            return;
        }

    }


}
