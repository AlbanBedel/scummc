/* ScummC
 * Copyright (C) 2006  Alban Bedel
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */


#include <scummVars6.s>
#include "common.sch"
#include "secretroom.sch"
#include "officeroom.sch"
#include "inventoryitems.sch"
#include "actors.sch"


bit terminalActivated;
bit cubeDisappeared;
bit hasShotAtNode;


room SecretRoom {

    image = "graphics/rooms/back02_merged.bmp";

    boxd = "graphics/rooms/back02.box";

    zplane = { "graphics/rooms/back02_mask1.bmp", "graphics/rooms/back02_mask2.bmp" };

    //trans = 0;

    
    object blueCup {
        dir = SOUTH;

        verb(int vrb, int objA, int objB) {
        case LookAt:
            egoSay("The holy artifact!");
            return;
        }
    }


    object commanderZifObj {
        name = "OfficeRoom::commanderZifObj";
        verb(int vrb,int objA,int objB) {
            char* sentence;
            int asked;
        case TalkTo:
            Actors::zobTalkToZif(1, 1);
            return;
        case LookAt:
            egoSay("My commanding officer, Commander Zif.");
            return;
        case Give:
            if(objB == InventoryItems::gun) {
                if( ! hasShotAtNode ) {
                    egoSay("And lose my advantage?");
                    return;
                }
                Actors::outro();
            }
            else
                egoSay("I might need this.");
            return;
        }

    }


    object computerTerminal {
        x = 176;
        y = 56;
        w = 16;
        h = 24;
        hs_x = 30;
        hs_y = 43;
        name = "computer terminal";
        dir = WEST;

        verb(int vrb, int objA, int objB) {
        case LookAt:
            egoSay("Looks pretty ordinary.");
            return;
        case Use:
            if( terminalActivated ) {
                try {
                animateActor(VAR_EGO, 24);
                delay(25);
                animateActor(VAR_EGO, 28);
                delay(25);
                animateActor(cubeActor, 24);
                delay(50);
                egoSay("Looks like I broke the encryption.");
                waitForMessage();
                putActorAt(commanderZif,60,85,SecretRoom);
                actorFace(commanderZif,VAR_EGO);
                actorSay(commanderZif,"Well done, ensign.");
                waitForMessage();
                actorSay(commanderZif,"Now retrieve the relic!");
                waitForMessage();
                egoSay("Small problem, sir.");
                waitForMessage();
                actorSay(commanderZif,"What's that?");
                waitForMessage();
                egoSay("It is still held in place.");
                waitForMessage();
                actorSay(commanderZif,"Then find a way to bring it down.");
                waitForMessage();
                egoSay("Aye, sir!");
                waitForMessage();
                }
                override {
                    if(VAR_OVERRIDE) {
                        stopTalking();
                        putActorAt(commanderZif,60,85,SecretRoom);
                        actorFace(commanderZif,VAR_EGO);
                    }
                }
                actorObject[commanderZif] = commanderZifObj;
                putActorAt(cubeActor,0,0,InventoryItems);
                cubeDisappeared = 1;
            }
            else
                egoSay("The terminal is offline.");
            return;
        }

    }

    object keySlot {
        x = 176;
        y = 80;
        w = 16;
        h = 16;
        hs_x = 25;
        hs_y = 30;
        name = "key slot";
        dir = WEST;

        verb(int vrb, int objA, int objB) {
        case LookAt:
            egoSay("This looks like the recepticle for some kind of electronic key.");
            return;
        case Use:
            if(objB == InventoryItems::card) {
                egoSay("I think this should activate the terminal.");
                waitForMessage();
                animateActor(VAR_EGO, 24);
                delay(25);
                animateActor(VAR_EGO, 28);
                terminalActivated = 1;
                setObjectOwner( InventoryItems::card, 0 );
            }
            return;
        }

    }
    
    object node {
        x = 152;
        y = 16;
        w = 16;
        h = 8;
        hs_x = -50;
        hs_y = 75;
        name = "node";
        dir = EAST;

        verb(int vrb, int objA, int objB) {
        case LookAt:
            egoSay("It appears to assist in suspending the artifact.");
            return;
        case Use:
            if(objB == InventoryItems::gun) {
                if( getObjectState( InventoryItems::gun ) != 2 ) {
                    egoSay("The weapon is not loaded.");
                    return;
                }
                if( cubeDisappeared != 1 ) {
                    egoSay("The suspension cage prevents a clear shot at the node.");
                    return;
                }
                hasShotAtNode = 1;
                animateActor(VAR_EGO,40);
                delay(120);
                egoSay("Missed!");
                waitForMessage();
                egoSay("I am not familiar with the aiming reticule.");
                return;
            }
            return;
        }
    }


    object exitToOfficeRoom {
        x = 48;
        y = 32;
        w = 32;
        h = 72;
        hs_x = 10;
        hs_y = 50;
        name = "room";
        dir = WEST;

        verb(int vrb, int objA, int objB) {
        case WalkTo:
            putActorAt(VAR_EGO,280,100,OfficeRoom);
            startRoom(OfficeRoom);
            //startRoomWithEgo( OfficeRoom::commanderZifObj, OfficeRoom, 280, 100 );
            //startRoomWithEgo( 0, OfficeRoom, 280, 100 );
            return;
        }

    }


}
