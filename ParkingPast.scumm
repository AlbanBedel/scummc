
// include all the vars used by the engine itself
#include "scummVars6.s"

// define the tow type of verb we have
verb Action,GotThere;
// define an actor for our hero
actor hero;
// define some global vars we are using in this example
// all vars are set to zero before start.
bit saidGreat;
int toldNowhere;

// our room
room ParkingPast {
  // first we define the room parameters
  // the background picture
  image = "ParkingPast.bmp";
  // the zplanes
  zplane[1] = "ParkingPast.zp01.bmp";
  zplane[2] = "ParkingPast.zp02.bmp";
  zplane[3] = "ParkingPast.zp03.bmp";
  // define the boxes
  // here we use the block from dott
  // if we used instead a file produced with boxedit the boxm parameter
  // wouldn't be nessecary as the matrix is alredy stored in these files.
  boxd = "ParkingPast.boxd";
  boxm = "ParkingPast.boxm";
  // the default scaling
  scal = "ParkingPast.scal";
  // the transparent color
  trans = "5";

  // define the charset we are going to use
  chset chset1 = "Talk.chset";
  // and the costume for our actor
  cost egoCost = "hoagie.cost";

  // define a few objects in the room
  // first a fully passive object
  object oldCar {
    // define its position and size
    x = 280;
    y = 40;
    w = 120;
    h = 80;
    // the hotspot, that's the point where the actor is going to stand
    // we he walk to the object. They are relative to the object coordinate
    // and thus can be negative.
    hs_x = 40;
    hs_y = 91;
    // give it a name so our hero can tell what it is
    name = "a kind of old car";
    // set the direction the actor should have when standing in front
    // of the object
    dir = NORTH;
  }

  // define another object, a bit more complex this time
  object fieldOut {
    // again the various parameters
    x = 420;
    y = 20;
    w = 68;
    h = 32;
    hs_x = 10;
    hs_y = 40;
    dir = EAST;
    name = "a field";

    // and a verb
    // this one get fired when the actor reach the object
    GotThere(int this) {
      int x,y;
      array tst;

      // store the actor position
      x = getObjectX(hero);
      y = getObjectY(hero);
      // look if we alredy said how bad the game is
      if(!toldNowhere) {
	// start to count
	toldNowhere = 1;
	// say it's going nowhere
	printEgoOverhead();
	printEgo("Hmm, that's going nowhere.");
	// wait, this deschedule the script
	waitForMessage();
	// turn to the player
	actorTurnToDirection(180);
	// mumble that this game suck
	printEgoMumble();
	printEgo("-- And they call that a game !!! --");
	// don't wait will mumbling

      } else if(toldNowhere == 1) {
	// we alredy made our sarcastic comment ;)
	// so say to player he should listen better.
	actorTurnToDirection(180);
	printEgoOverhead();
	printEgo("I alredy told you that it's going NOWHERE !!!");
	// count how many time we said it
	toldNowhere = 2;
	// wait
	waitForMessage();
      } else {

	// now say the player how many time we told this to him alredy
	actorTurnToDirection(180);
	printEgoOverhead();
	printEgo("I alredy told you %i{toldNowhere} times that it's going NOWHERE !!!");
	// count how many time we said it
	toldNowhere++;	
	// wait
	waitForMessage();
      }

      // As the script was descheduled by the above wait calls
      // the player could have sent our hero somewhere else alredy.
      // In such case we don't want to make him go back to the field,
      // so check that we didn't moved.
      if(getObjectX(hero) == x && getObjectY(hero) == y)
	walkActorTo(hero,404,68);
    }
  }

  // Finnaly an object with different states
  object door {
    // again the params
    x = 88;
    y = 0;
    w = 40;
    h = 40;
    dir = NORTH;
    // The states definitions, by default objects are in state 0
    // and nothing is displayed. For the above states the corresponding
    // picture is displayed.
    // In the background image the door is shown closed, so we define
    // a state for the open door.
    states = {
      // a state have at least a hotspot and a picture.
      // if needed the z planes can also be defined.
      // hs_x/hs_y is not defined as the first state hotspot is
      // also used for the state 0 by the vm.
      { 
	17, 42, "ParkingPastDoor.bmp",
	{
	  "ParkingPastDoor.zp01.bmp",
	  "ParkingPastDoor.zp02.bmp",
	  "ParkingPastDoor.zp03.bmp"
	}
      }
    };

    // When we get at the door say that it's closed.
    GotThere(int this) {
      // say it's closed as long as it was not open.
      if(!saidGreat) {
	printEgoOverhead();
	printEgo("It's closed.\n");
      }
    }

    // And now action :)
    Action(int this) {
      // a localvar
      int st;
      // print some debug stuff. Note that these messeges won't be shown
      // unless scummvw is run with -d
      printDbgBegin();
      printDbg("Action");
      // get the new state
      st = !getState(this);
      // set it
      setState(this,st);
      // do some stupid insider joke.
      unless(saidGreat) {
	printEgo("Great !!!\wNow if the box matrix god is with me,\wi should be able to go past that door.");
	saidGreat = 1;
      }
      // lock/unlock the door. For this we must first modify the flag
      // of the door box.
      // in the orginal boxes of this room, the door box is box 11
      setBoxFlags([11],st ? 0 : 0x80);
      // but if we we use boxedit we could write something like this
      // which is much nicer
      //setBoxFlags([doorBox],st ? 0 : 0x80);

      // and then recreate the box matrix to make the above change
      // take effect
      createBoxMatrix();
    }

  }

  // This script is executed when the room is loaded
  local script entry() {
    // initialize the box matrix
    createBoxMatrix();

    // create the actor
    actorSetCur(hero);
    actorInit();
    actorSetCostume(egoCost);
    actorSetTalkPos(0,-95);
    actorSetName("Our Hero");
    actorSetWalkSpeed(3,1);
    actorSetTalkColor(0x0F);
    actorSetWidth(35);
    actorSetAnimSpeed(3);
    // set VAR_EGO so we can use the *Ego* functions
    VAR_EGO = hero;
    // put him somewhere in the room
    putActorInXY(hero,219,125,ParkingPast);
 
    // make the camera follow our hero
    actorFollowCamera(hero);

    // make our hero welcome the player
    // the %c{} stuff are used to change the text color.
    printEgoBegin();
    printEgoOverhead();
    printEgo("Welcome to the very first %c{0xCC}FREE%c{0x0F} scumm game.\w"
	     "Well ...\w"
	     "They told me to say so,\w"
	     "but somewhat i think i know this place.");

  }

  // This script is run when leaving the room.
  // We have nothing to do there
  local script exit() {
    printDbgBegin();
    printDbg("Exit");
  }

  // Do a forward declaration
  local script mouseHandler(int arg);

  // This script receive the keyboard and mouse events
  script inputHandler(int a,int cmd, int mode) {
    // keybord input
    if(a == 4) {
      // do some stuff with a couple keys
      switch(cmd) {
	// test actorTurnToDirection
      case 0x30:
	actorTurnToDirection(0);
	break;
      case 0x31:
	actorTurnToDirection(90);
	break;
      case 0x32:
	actorTurnToDirection(180);
	break;
      case 0x33:
	actorTurnToDirection(270);
	break;
      
	// pause on space
      case 0x20:
	pauseGame();
	break;

	// debug the others
      default:
	printDbgBegin();
	printDbg("Pressed key %i{cmd}");
      }
    } else // use a local script to handle mouse events
	startScriptQuick(mouseHandler, [a, mode]);
  }

  // The main script is the first thing started by the engine.
  // At that point no room is loaded yet.
  script main (int bootParam) {
    // First setup the engine a bit
    // set the F5 key for the main menu
    VAR_MAINMENU_KEY = 319;
    // set the . key to skip text
    VAR_TALKSTOP_KEY = 46;
    // set F8 as the restart key
    VAR_RESTART_KEY = 322;
    // pause key can also be defined in that way instead of
    // doing it in the key handler as we did.
    //VAR_PAUSE_KEY = 112;

    // set the input handler
    VAR_VERB_SCRIPT = inputHandler;
    // set the string used for pause
    VAR_PAUSE_STR[0] = "ScummC Paused";

    // keep this room in memory event if we leave it,
    // as it contain the charset, costume, etc
    // it's probably not very useful atm bcs we only have one
    // room, but well :)
    lockRoom(ParkingPast);

    // Initialize the graphic mode.
    // It need to match the room image height otherwise
    // the graphics are going wacky
    setScreen(0,144);

    // init the charset
    initCharset(chset1);

    // turn on the cursor and user input
    userPutOn();
    cursorOn();
    
    // do the box effect
    screenEffect(0x0101);
    // load the room
    loadRoom(ParkingPast);
  }

  // The mouse handler. Note that this is probably not a good
  // idea to use a local script for such thing in a real game.
  // Here it's a local script for demo purpose.

  local script mouseHandler(int arg,int btn) {
    int obj,ep,dist;

    // some debug stuff
    printDbgBegin();
    printDbg("Got arg %i{arg} %i{btn}.");

    // the user clicked on the image somewhere
    if(arg == 2) {
      // look if there's an object there
      obj = findObject(VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
      // button 1 is used for goto, walk
      if(btn == 1) {
	// if we have an object
	if(obj) {
	  // look if it have a GotThere script
	  ep = getVerbEntrypoint(obj,GotThere);
	  // if so walk the actor to the object and run the script
	  if(ep) {
	    walkActorToObj(hero,obj,0);
	    waitForActor(hero);
	    startObjectQuick(obj,GotThere, [obj]);
	  } else // otherwise just go where the user clicked
	    walkActorTo(hero,VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
	} else // if we have no object then just go there
	  walkActorTo(hero,VAR_VIRT_MOUSE_X,VAR_VIRT_MOUSE_Y);
	
	// button 2 is only interssing on objects
      } else if(obj) {
	// look if we can reach the object.
	if(getDistObjObj(hero,obj) >= 0) {
	  // go over there
	  walkActorToObj(hero,obj,0);
	  // wait for the actor to be there
	  waitForActor(hero);
	  
	  // look if have an Action script
	  ep = getVerbEntrypoint(obj,Action);
	  if(ep) { // we have one, run it
	    printDbgBegin();
	    printDbg("Start action");
	    startObjectQuick(obj,Action, [obj]);
	  } else { // no, then just say what the object is
	    printEgoOverhead();
	    printEgo("It's %n{obj}.");
	  }
	} else { // We can't reach this object, so complain about it.
	  printEgoOverhead();
	  printEgo("I can't go there");
	}
      }
    } else {
      // Make some fun if we are not alredy saying something.
      if(!VAR_HAVE_MSG) {
	actorTurnToDirection(180);
	printEgoOverhead();
	printEgo("There's nothing there man.\w"
		 "It's just a stupid black band.");
      }
    }
  }


}

